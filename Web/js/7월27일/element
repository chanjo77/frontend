html 문서 앞에 <script> 태그 내에 js코드를 작성했고, 문서가 로드 되기 전에 script의 element를 가져오지 못한 상태에서 console.log로 디버그하여 개발자도구에 확인해보았을때는 왜 element를 가져와졌는지 이유에 대해서 알아보기.


<!DOCTYPE html>
<html lang=“ko”>
<head>
    <meta charset=“UTF-8">
    <title>JavaScript DOM Element</title>
    <script>
        //HTML 태그 이름을 이용한 선택
        console.log(‘aaa’)
        var selectedItem = document.getElementsByTagName(“li”);     // 모든 <li> 요소를 선택함.
        console.log(selectedItem)
        console.log(selectedItem.length)
        for (var i = 0; i < selectedItem.length; i++) {
            selectedItem.item(i).style.color = “red”;   // 선택된 모든 요소의 텍스트 색상을 변경함.
            console.log(selectedItem.item(i));
        }
    </script>
</head>
<body>
    <h1>HTML 태그 이름을 이용한 선택</h1>
    <ul>
        <li>첫 번째 아이템이에요!</li>
        <li>두 번째 아이템이에요!</li>
        <li>세 번째 아이템이에요!</li>
        <li>네 번째 아이템이에요!</li>
        <li>다섯 번째 아이템이에요!</li>
    </ul>
    <script>
        var selectedItem = document.getElementsByTagName(“li”);     // 모든 <li> 요소를 선택함.
        for (var i = 0; i < selectedItem.length; i++) {
            selectedItem.item(i).style.color = “red”;   // 선택된 모든 요소의 텍스트 색상을 변경함.
        }
    </script>
</body>
</html>




JavaScript 코드가 <script> 태그 내에 작성되면, 해당 코드는 HTML 문서가 파싱되면서 순차적으로 실행됩니다. 
일반적으로 HTML 문서의 파싱은 위에서 아래로 진행되기 때문에 <script> 태그가 만나는 시점에 해당하는 요소들은 이미 파싱되어 메모리에 존재하게 됩니다.
그래서 코드가 실행되는 시점에서 문서의 HTML 요소들은 이미 로드되어 있어서
JavaScript 코드가 실행되는 순간에 선택된 요소들을 가져올 수 있는 것입니다.
JavaScript 코드를 <script> 태그 내에 작성하지 않고 외부 파일로 분리하여 로드하거나 <script> 태그를 <body> 태그 끝에 있으면 
코드 실행 시점에서 HTML 요소들이 아직 파싱되기 전이므로 요소를 가져오려고 할 때 null 또는 undefined 등이 반환될 수 있습니다.




